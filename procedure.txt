
---------AFFICHAGE---------

Pour l'affichage, on affiche d'abord la premiere ligne tout en haut avec le print normal   |------------------------------------------------|
sur par exemple n = 30 ligne de large (n variable)

Ensuite une affiche les lignes une par une avec le System.out.format tel que ("%32s",s); qui "allouera" plus de place pour afficher s 

Enfait a revoir

sinon on s'embête pas on fait 2 lignes - une en haut et une en bas

et puis voila

on affiche tout le reste au milieu -> taille variable en fonction de ce qu'on a afficher                    |------------------------------------------------|
-> bien plus simple, on prend ca                                                                              text de taille variable
                                                                                                            |------------------------------------------------|
en plus la on se fiche de la largeur qu'un string prendra vu qu'on est pas limité sur la droite 
quoi qu'il arrive on doit afficher les lignes une par une.

En ce qui concerne la gestion du magasin :

3 classes : class magasin : une liste d'article(Article []), un nombre d'article restant(int)
            class article : un numéro d'id(int), un nom(string), un prix(double), quantité présente(int)
            class panier :  une liste d'article(Article []), un nombre d'article présent(int)
            
on peut rajouter une classe rayon si besoin, qui contient une liste d'article mais ce serai se compliquer pour rien
voir a la fin si y'a pas assez dans le projet

il faudrai qu'on ai une petite interface pour savoir quelle commande peut executer le client pour acheter, abandonner, vider le panier, ou procéder au payement final.

procédure lors de l'arrivée dans le programme :

-On affiche tout ( interface magasin d'abord puit interface utilisateur )
-on demande ce que veut faire l'utilisateur
-en fonction de ce qu'il répond 
    -> abandon : on vide le panier, on met le compteur prix à 0 et on souhaite la bonne journée ( en affichage tout ca bien sûr )
    -> ajouter un article : on demande quel article il veut, on affiche la quantité restant du produit ainsi que son prix
             -> quantité = 0, on dit impossible, on redemande un autre article
             -> quantité > 0, on demande la quantité voulue avec un cas si quantité voulu > quantité restante, dans quel cas on redemande la quantité voulue
    -> on ajoute alors le produit au panier, on affiche " Produit ajouté !"
    -> on réaffiche l'interface magasin avec toutes les variables à jour ( prix total, quantités de produit dans le panier )
    -> et on recommence depuis l'interface utilisateur, question etc
    
Interface magasin : 
    -> bonjour
    -> nombre de produit dans le panier
    -> prix total du panier
    -> on peut mettre les 2 derniers articles ajoutés au panier avec leur quantité et leur prix (on fait une liste de 2 éléments qui sont remplacés a chaque fois )
    -> on peut mettre des promotions, 3 articles en promo affichés, avec 25%, 50%, et 85% de réduction, nom prix de base puis prix réduit affichés
       on fait une liste de 3 éléments n prix au hazard dans la liste des articles du magasin


Un peu faible comme contenu, on peut créer 2 fonctions différentes dans l'arrivée au magasin : 
    -> on est le client, dans quel cas on fait les instructions du dessus
    -> on est un employé, on peu remplir le magasin avec les produits qui manque : genre une fonction cherche qui regarde le premier produit qui manque et si on a
       envie de travailler donc de rajouter du stock



magasin
article
livraison
stock
panier




2eme idée : 
Maker (Make your own burger)

on pourrai créer son propre burger a partir d'ingrédients
y'aurai pas de limite d'ingrédients par contre le prix serai haut lol (nw btw about that ^^ worth it)

on aurai les classes suivantes :
    class livraison avec toutes les livraisons pour restocker
    class stock avec tous les ingrédients et différents produits - d'ailleurs quand on commence le programme, on génére random le nombre d'ingrédients
    .class ingrédient 
    -class burger - ce serai une liste d'ingrédients et qui serai singleton
    .class promotion - prend un int en attribut qui représente un pourcentage de promotion a appliquer 
    class fastfood qui est abstract
    .class boisson
    .  class boissonChaude
    .class dessert
    .  class dessertFroid
    class commande
    
- = pas fini il reste des choses a voir ( niveau quantité surtout pour les ingrédients dans le stock )
. = normalement fini

et enfait y'a une limite d'ingrédients pour un burger, c'est plus simple pour gérer le tableau d'ingrédients




REAL PROCED 

.Livraison : Lorsque 2/3 du stock est manquant, on effectue une livraison pour tout remplir au maximum
    Attention ! On ne néglige pas les accidents de la route, la livraison a en réalité un taux de 85% de chance de réussite

.Fast-Food : Au démarrage du programme, un nombre aléatoire de commande est généré, s'il est au dessus de 20, alors on      
             refuse de prendre la commande du client ! Premier arrivé, premier servi ( oui, la chance n'est pas un hazard )
    Attention ! Le risque d'incendie est 1/20 ! Si jamais le Fast-Food brûle, le client ne pourra pas être servi !
.Ingredient : le prix d'un ingredient sera ( en théorie ) fixé par rapport à son poids.

REAL CLASSES

.Boisson : (prix,nom,quantite) --- getPrix(), toString()
  .BoissonChaude : (extends Boisson + minute) --- refroidir(), getTemps()
  
.Dessert : (prix, nom) --- getPrix()
  .DessertFroid : (extends Dessert + minute) --- rechauffer(), getTemps()
  
.Burger : (prix,poids,composition,MAX_QUANTITE,quantite) --- ajouter_ingredient(Ingredient), getPrix(), getPoids(),               clone()

.Promotion : INTERFACE() --- avoirPromotion(int)

.Commande : (implements Promotion + id, cpt_id, boisson, burger, dessert, prix) --- avoirPromotion(int)

.FastFood : (quant_comm, Stock) --- ajouterCommande(Commande),

.Ingredient : (implements promotion, nom, poids, prix,String list_ingredient) --- getNom(), getPrix(), getPoids(), clone(), avoirPromotion(int),
      getString()
      
Stock : SINGLETON(reserve, quantite, MAX_QUANTITE, MIN_QUANTITE) --- getInstance(), getQuantite(), getQuantitePctg(),                       avoirLivraison(), enleverIngredient(Ingredient)



donc la en gros je suis en train de faire le stock pour voir quand je dois le restocker, faut juste qu'on parcours chaque String qui il y a dans la reserve
et on voit si y'en a moins de 30 sinon on en ajoute bref 
D'ailleurs faut rajouter les boissons etc dans le stock 
En mode je met pas avec les ingredients je fais deux listes a part 

